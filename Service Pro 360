
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<link rel="manifest" href="manifest.json">
<title>Service Pro 360</title>
<style>
:root{--brand:#0ea5e9;--bg:#f8fafc;--card:#fff;--text:#0f172a;--muted:#64748b}
*{box-sizing:border-box}html,body{height:100%;margin:0;background:var(--bg);color:var(--text);font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif}
header{background:var(--brand);color:#fff;padding:14px 16px;position:sticky;top:0;display:flex;gap:12px;align-items:center}
h1{font-size:18px;margin:0;flex:1}.container{padding:16px}.card{background:var(--card);border-radius:16px;padding:16px;box-shadow:0 10px 20px rgba(2,8,23,.06);margin-bottom:16px}
.tabbar{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:8px}.tabbar button{flex:1}
button,input,select,textarea{width:100%;padding:10px 12px;border:1px solid #e2e8f0;border-radius:12px;font-size:14px}
button.primary{background:var(--brand);border:none;color:#fff;cursor:pointer}
.list{list-style:none;margin:0;padding:0}.list li{padding:10px 0;border-bottom:1px solid #e5e7eb}
.small{font-size:12px;color:var(--muted)}.hidden{display:none}.row{display:flex;gap:12px;flex-wrap:wrap}.row>*{flex:1;min-width:220px}
</style>
<script>
if('serviceWorker'in navigator){addEventListener('load',()=>navigator.serviceWorker.register('sw.js'))}
</script>
</head>
<body>
<header>
  <h1>Service Pro 360</h1>
  <button id="btn-install">Install</button>
  <select id="lang"><option value="en">EN</option><option value="es">ES</option></select>
</header>
<div class="container">
  <div class="card">
    <div class="tabbar">
      <button class="primary" data-tab="dashboard">Dashboard</button>
      <button data-tab="customers">Customers</button>
      <button data-tab="jobs">Jobs</button>
      <button data-tab="invoices">Invoices</button>
      <button data-tab="settings">Settings</button>
    </div>
    <div id="view-dashboard"></div>
    <div id="view-customers" class="hidden"></div>
    <div id="view-jobs" class="hidden"></div>
    <div id="view-invoices" class="hidden"></div>
    <div id="view-settings" class="hidden"></div>
  </div>
  <footer class="small">Offline • EN/ES • GPS • Photos • 4-month scheduling</footer>
</div>
<script type="module" src="app.js"></script>
</body>
</html>
B) manifest.json
{
  "name": "Service Pro 360",
  "short_name": "SP360",
  "start_url": "index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#0ea5e9",
  "icons": []
c) idb.js
export const db = (()=>{
  const DB='sp360-db', VER=1; let _db;
  function open(){return new Promise((res,rej)=>{
    const r=indexedDB.open(DB,VER);
    r.onupgradeneeded=e=>{
      const d=e.target.result;
      if(!d.objectStoreNames.contains('customers')) d.createObjectStore('customers',{keyPath:'id'});
      if(!d.objectStoreNames.contains('jobs')) d.createObjectStore('jobs',{keyPath:'id'});
      if(!d.objectStoreNames.contains('invoices')) d.createObjectStore('invoices',{keyPath:'id'});
      if(!d.objectStoreNames.contains('settings')) d.createObjectStore('settings',{keyPath:'key'});
    };
    r.onsuccess=e=>{_db=e.target.result;res(_db)}; r.onerror=rej;
  })}
  async function store(n,m='readonly'){if(!_db)await open();return _db.transaction(n,m).objectStore(n)}
  async function all(n){const s=await store(n);return await new Promise((r,j)=>{const q=s.getAll();q.onsuccess=()=>r(q.result);q.onerror=j})}
  async function get(n,k){const s=await store(n);return await new Promise((r,j)=>{const q=s.get(k);q.onsuccess=()=>r(q.result);q.onerror=j})}
  async function put(n,v){const s=await store(n,'readwrite');return await new Promise((r,j)=>{const q=s.put(v);q.onsuccess=()=>r(q.result);q.onerror=j})}
  async function del(n,k){const s=await store(n,'readwrite');return await new Promise((r,j)=>{const q=s.delete(k);q.onsuccess=()=>r(true);q.onerror=j})}
  return {open,all,get,put,del};
})();
D) app.js
import { db } from './idb.js';

const $ = s=>document.querySelector(s);
const uid = ()=>'id-'+Math.random().toString(36).slice(2)+'-'+Date.now();
const fmt = d=>new Date(d).toLocaleDateString();
const t = {
  en:{dashboard:'Dashboard',customers:'Customers',jobs:'Jobs',invoices:'Invoices',settings:'Settings',
      addCustomer:'Add Customer',name:'Name',email:'Email',phone:'Phone',address:'Address',notes:'Notes',
      save:'Save',delete:'Delete',scheduleJob:'Schedule Job',serviceEvery4:'Service every 4 months',
      nextService:'Next service',gps:'Capture GPS',complete:'Complete',pending:'Pending',
      createInvoice:'Create Invoice',language:'Language',brand:'Brand',countyEmail:'County email',
      sendToCounty:'Send to County',countyMsg:'Attach PDF invoice from Files if needed.',
      export:'Export JSON',import:'Import JSON',chooseFile:'Choose file',installButton:'Install',installPrompt:'Install prompt shown.',
  },
  es:{dashboard:'Panel',customers:'Clientes',jobs:'Trabajos',invoices:'Facturas',settings:'Ajustes',
      addCustomer:'Agregar cliente',name:'Nombre',email:'Correo',phone:'Teléfono',address:'Dirección',notes:'Notas',
      save:'Guardar',delete:'Eliminar',scheduleJob:'Programar trabajo',serviceEvery4:'Servicio cada 4 meses',
      nextService:'Próximo servicio',gps:'Capturar GPS',complete:'Completado',pending:'Pendiente',
      createInvoice:'Crear factura',language:'Idioma',brand:'Marca',countyEmail:'Correo del condado',
      sendToCounty:'Enviar al condado',countyMsg:'Adjunte PDF desde Archivos si es necesario.',
      export:'Exportar JSON',import:'Importar JSON',chooseFile:'Elegir archivo',installButton:'Instalar',installPrompt:'Solicitud de instalación mostrada.',
  }
};
let lang = localStorage.getItem('sp360-lang') || 'en';
$('#lang').value = lang;
$('#lang').addEventListener('change',()=>{lang=$('#lang').value;localStorage.setItem('sp360-lang',lang);render();});

let deferredPrompt;
addEventListener('beforeinstallprompt',e=>{e.preventDefault();deferredPrompt=e;});
$('#btn-install').textContent = t[lang].installButton;
$('#btn-install').addEventListener('click',async()=>{
  if(deferredPrompt){deferredPrompt.prompt();await deferredPrompt.userChoice;deferredPrompt=null;alert(t[lang].installPrompt);}
  else alert('Use browser menu → Add to Home screen');
});

const views=['dashboard','customers','jobs','invoices','settings'];
document.querySelectorAll('.tabbar button').forEach(b=>b.addEventListener('click',()=>{
  views.forEach(v=>$('#view-'+v).classList.add('hidden'));
  document.querySelectorAll('.tabbar button').forEach(x=>x.classList.remove('primary'));
  const tab=b.dataset.tab; $('#view-'+tab).classList.remove('hidden'); b.classList.add('primary'); render();
}));

function plus4Months(d){const x=new Date(d);x.setMonth(x.getMonth()+4);return x.toISOString();}
async function getGPS(){return new Promise((res,rej)=>navigator.geolocation?navigator.geolocation.getCurrentPosition(p=>res({lat:p.coords.latitude,lon:p.coords.longitude,ts:Date.now()}),rej,{enableHighAccuracy:true,timeout:10000}):rej('no geo'));}

async function render(){
  const customers=await db.all('customers');
  const jobs=await db.all('jobs');
  const invoices=await db.all('invoices');

  $('#view-dashboard').innerHTML = `
    <div class="card"><h2>${t[lang].jobs} — ${t[lang].serviceEvery4}</h2>
      <ul class="list">
      ${jobs.slice().sort((a,b)=>new Date(a.due)-new Date(b.due)).slice(0,5).map(j=>`
        <li><strong>${j.customerName||j.customerId}</strong> • ${fmt(j.due)} • <span class="small">${t[lang][j.status]||j.status}</span></li>
      `).join('') || '<li class="small">No jobs yet.</li>'}
      </ul>
    </div>`;

  $('#view-customers').innerHTML = `
    <div class="card"><h2>${t[lang].addCustomer}</h2>
      <div class="row">
        <div><label>${t[lang].name}</label><input id="c-name"></div>
        <div><label>${t[lang].email}</label><input id="c-email" type="email"></div>
        <div><label>${t[lang].phone}</label><input id="c-phone"></div>
      </div>
      <div><label>${t[lang].address}</label><input id="c-address"></div>
      <div><label>${t[lang].notes}</label><textarea id="c-notes"></textarea></div>
      <button class="primary" id="btn-save-c">${t[lang].save}</button>
    </div>
    <div class="card"><h2>${t[lang].customers}</h2>
      <ul class="list">
        ${customers.map(c=>`
        <li><strong>${c.name}</strong> — ${c.phone||''}<br><span class="small">${c.address||''}</span><br>
          <button data-id="${c.id}" class="btn-del-c">${t[lang].delete}</button>
          <button data-id="${c.id}" class="btn-job">${t[lang].scheduleJob}</button>
        </li>`).join('') || '<li class="small">No customers yet.</li>'}
      </ul>
    </div>`;
  $('#btn-save-c')?.addEventListener('click', async ()=>{
    const c={id:uid(),name:$('#c-name').value.trim(),email:$('#c-email').value.trim(),phone:$('#c-phone').value.trim(),
             address:$('#c-address').value.trim(),notes:$('#c-notes').value.trim(),created:new Date().toISOString()};
    if(!c.name) return alert('Name required'); await db.put('customers',c); render();
  });
  document.querySelectorAll('.btn-del-c').forEach(b=>b.addEventListener('click',async()=>{await db.del('customers',b.dataset.id);render();}));
  document.querySelectorAll('.btn-job').forEach(b=>b.addEventListener('click',async()=>{
    const c=await db.get('customers',b.dataset.id);
    const j={id:uid(),customerId:c.id,customerName:c.name,created:new Date().toISOString(),due:plus4Months(Date.now()),status:'pending',gps:null,photos:[],notes:''};
    await db.put('jobs',j); render();
  }));

  $('#view-jobs').innerHTML = `
    <div class="card"><h2>${t[lang].jobs}</h2>
      <ul class="list">
        ${jobs.slice().sort((a,b)=>new Date(a.due)-new Date(b.due)).map(j=>`
        <li>
          <strong>${j.customerName||j.customerId}</strong> — ${fmt(j.due)}<br>
          <span class="small">${t[lang].notes}:</span><br>
          <textarea data-id="${j.id}" class="job-notes">${j.notes||''}</textarea>
          <div class="row">
            <button data-id="${j.id}" class="btn-gps">${t[lang].gps}</button>
            <input type="file" accept="image/*" capture="environment" data-id="${j.id}" class="job-photo">
            <button data-id="${j.id}" class="btn-done">${t[lang].complete}</button>
            <button data-id="${j.id}" class="btn-pending">${t[lang].pending}</button>
            <button data-id="${j.id}" class="btn-invoice">${t[lang].createInvoice}</button>
          </div>
          <div class="small">${j.gps?`GPS: ${j.gps.lat.toFixed(5)}, ${j.gps.lon.toFixed(5)}`:''}</div>
          ${j.photos?.length? j.photos.map(p=>`<img src="${p}" style="max-width:80px;border-radius:8px;margin-right:6px">`).join(''):''}
        </li>`).join('') || '<li class="small">No jobs yet.</li>'}
      </ul>
    </div>`;
  document.querySelectorAll('.job-notes').forEach(el=>el.addEventListener('change',async()=>{
    const j=await db.get('jobs',el.dataset.id); j.notes=el.value; await db.put('jobs',j);
  }));
  document.querySelectorAll('.btn-gps').forEach(b=>b.addEventListener('click',async()=>{
    try{const j=await db.get('jobs',b.dataset.id); j.gps=await getGPS(); await db.put('jobs',j); render();}catch(e){alert('GPS error');}
  }));
  document.querySelectorAll('.job-photo').forEach(i=>i.addEventListener('change',async()=>{
    const f=i.files[0]; if(!f) return; const r=new FileReader();
    r.onload=async()=>{const j=await db.get('jobs',i.dataset.id); j.photos=j.photos||[]; j.photos.push(r.result); await db.put('jobs',j); render();};
    r.readAsDataURL(f);
  }));
  document.querySelectorAll('.btn-done').forEach(b=>b.addEventListener('click',async()=>{const j=await db.get('jobs',b.dataset.id); j.status='complete'; await db.put('jobs',j); render();}));
  document.querySelectorAll('.btn-pending').forEach(b=>b.addEventListener('click',async()=>{const j=await db.get('jobs',b.dataset.id); j.status='pending'; await db.put('jobs',j); render();}));
  document.querySelectorAll('.btn-invoice').forEach(b=>b.addEventListener('click',async()=>{
    const j=await db.get('jobs',b.dataset.id);
    const inv={id:uid(),jobId:j.id,customerName:j.customerName,description:j.notes||'Service visit',amount:0,created:new Date().toISOString()};
    await db.put('invoices',inv);
    const w=window.open('','_blank'); w.document.write(`
      <html><head><meta name="viewport" content="width=device-width,initial-scale=1"><title>Invoice</title>
      <style>body{font-family:Arial;padding:24px}.box{border:1px solid #ddd;padding:16px;border-radius:8px}</style></head><body>
      <h2>Invoice</h2><div class="box">
      <div><b>Customer:</b> ${inv.customerName||''}</div><div><b>Job:</b> ${j.id}</div>
      <div><b>Date:</b> ${fmt(inv.created)}</div><div><b>Description:</b> ${inv.description}</div><div><b>Amount:</b> $${(inv.amount||0).toFixed(2)}</div>
      </div><p class="small">Use Print → Save as PDF.</p></body></html>`); w.document.close();
  }));

  const brand=(await db.get('settings','brand'))?.value||'Service Pro 360 / Texas Septic Pros';
  const county=(await db.get('settings','countyEmail'))?.value||'';
  $('#view-settings').innerHTML = `
    <div class="card"><h2>${t[lang].settings}</h2>
      <div class="row">
        <div><label>${t[lang].language}</label><div>${$('#lang').value.toUpperCase()}</div></div>
        <div><label>${t[lang].brand}</label><input id="set-brand" value="${brand}"></div>
        <div><label>${t[lang].countyEmail}</label><input id="set-county" value="${county}" placeholder="county@example.gov"></div>
      </div>
      <div class="row">
        <button class="primary" id="set-save">${t[lang].save}</button>
        <a id="send-county" class="primary" style="text-align:center;display:inline-block;padding:10px 12px;border-radius:12px;text-decoration:none"
           href="mailto:${county}?subject=Maintenance Report&body=${encodeURIComponent(t[lang].countyMsg)}">${t[lang].sendToCounty}</a>
      </div>
    </div>`;
  $('#set-save')?.addEventListener('click',async()=>{
    await db.put('settings',{key:'brand',value:$('#set-brand').value});
    await db.put('settings',{key:'countyEmail',value:$('#set-county').value});
    render();
  });
}
render();
E) sw.js
const CACHE='sp360-v1';
const ASSETS=['./','./index.html','./app.js','./idb.js','./manifest.json'];
self.addEventListener('install',e=>e.waitUntil(caches.open(CACHE).then(c=>c.addAll(ASSETS)).then(()=>self.skipWaiting())));
self.addEventListener('activate',e=>e.waitUntil(caches.keys().then(keys=>Promise.all(keys.map(k=>k===CACHE?null:caches.delete(k)))).then(()=>self.clients.claim())));
self.addEventListener('fetch',e=>e.respondWith((async()=>{try{const net=await fetch(e.request);(await caches.open(CACHE)).put(e.request,net.clone());return net;}catch(e2){return (await caches.match(e.request))||Response.error();}})()));
